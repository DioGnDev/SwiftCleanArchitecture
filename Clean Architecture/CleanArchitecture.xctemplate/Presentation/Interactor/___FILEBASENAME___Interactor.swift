//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright (c) ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Xcode Templates
//
//

import Foundation

protocol ___VARIABLE_sceneName___InteractorLogic {
    func get___VARIABLE_sceneName___(param: ___VARIABLE_sceneName___Request)
}

class ___VARIABLE_sceneName___Interactor: ___VARIABLE_sceneName___InteractorLogic {
    
    //presenter
    var presenter: ___VARIABLE_sceneName___PresenterLogic?
    
    //usecase
    var get___VARIABLE_sceneName___Usecase: Get___VARIABLE_sceneName___Usecase
    
    //initial
    init(get___VARIABLE_sceneName___Usecase: Get___VARIABLE_sceneName___Usecase) {
        self.get___VARIABLE_sceneName___Usecase = get___VARIABLE_sceneName___Usecase
    }
    
    //example method 
    func get___VARIABLE_sceneName___(param: ___VARIABLE_sceneName___Request) {
        
        get___VARIABLE_sceneName___Usecase.execute(param: param) { (result) in
            switch result {
            case .failure(let error):
                //present error to view
                break
            case .success(let items):
                if items.count == 0 || items.isEmpty {
                    //present empty view
                }else {
                    self.presenter?.present___VARIABLE_sceneName___(entities: items)
                }
                break
            }
        }
    }
    
}
