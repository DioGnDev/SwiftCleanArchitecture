//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright (c) ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//

import Foundation

protocol ___VARIABLE_sceneName___RemoteDataSource {
    
    func fetch___VARIABLE_sceneName___(param: [String: Any],
                       completion: @escaping(Result<[___VARIABLE_sceneName___Model], DataError>) -> Void)

}

class ___VARIABLE_sceneName___RemoteDataSourceImpl: ___VARIABLE_sceneName___RemoteDataSource{
    
    
    //Method example for remote datasource
    
    func fetch___VARIABLE_sceneName___(param: [String : Any],
                       completion: @escaping (Result<[___VARIABLE_sceneName___Model], DataError>) -> Void) {
        
        /*NetworkManager.shared.request(with: "your_url_string",
                                      withMethod: "Http_method",
                                      withParameter: param) { (result) in
            
            switch result {
            case .failure(let error):
                completion(.failure(error))
                break
            case .success(let data):
                do {
                    let json = try JSONSerialization.jsonObject(with: data, options: []) as! [String: Any]
                    if let arrayOfData = json["data"] as? [[String: Any]] {
                        
                        let models = arrayOfData.map { dictionary -> ___VARIABLE_sceneName___Model in
                            guard let rawData = ___VARIABLE_sceneName___Model(JSON: dictionary)
                            else {
                                return ___VARIABLE_sceneName___Model()
                            }
                            return rawData
                        }
                        
                        completion(.success(models))
                    }
                }catch {
                    completion(.failure(.init(errorType: .parseError)))
                }
                break
            }
            
        }*/
    }
    
}
