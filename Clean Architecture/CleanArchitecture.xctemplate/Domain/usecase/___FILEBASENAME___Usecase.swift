//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright (c) ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//

import Foundation

class Get___VARIABLE_sceneName___Usecase: BaseUsecase {
    
    typealias T = [___VARIABLE_sceneName___Entity]
    typealias P = ___VARIABLE_sceneName___Request
    typealias E = DataError
    
    //repository
    let repository: ___VARIABLE_sceneName___RepositoryLogic
    
    init(repository: ___VARIABLE_sceneName___RepositoryLogic) {
        self.repository = repository
    }
    
    func execute(param: ___VARIABLE_sceneName___Request,
                       completion: @escaping (Result<[___VARIABLE_sceneName___Entity], DataError>) -> Void) {
        
        repository.get___VARIABLE_sceneName___(parameter: param.toParam()) { (result) in
            switch result {
            case .failure(let error):
                completion(.failure(error))
            case .success(let entities):
                completion(.success(entities))
                break
            }
        }
    }
}

class ___VARIABLE_sceneName___Request {
    
    //this is just a sample model for param request
    
    var id: UInt8
    var order: String
    
    init(id: UInt8 = UUID().uuid.0, order: String = "ascending") {
        self.id = id
        self.order = order
    }
    
    func toParam() -> [String : Any] {
        return ["id": id as Any,
                "order": order as Any]
    }
}
