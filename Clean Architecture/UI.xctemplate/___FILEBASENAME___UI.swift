//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright (c) ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//

import Foundation
import UIKit

protocol ___VARIABLE_sceneName___DisplayLogic: class{
    func display___VARIABLE_sceneName___(viewModel: [___VARIABLE_sceneName___ViewModel])
}

class ___VARIABLE_sceneName___UI: UIViewController{
    
    var items: [___VARIABLE_sceneName___ViewModel] = []
    
    //dependency
    var interactor: ___VARIABLE_sceneName___InteractorLogic?
    var router: ___VARIABLE_sceneName___RouterLogic?
    
    init() {
        super.init(nibName: nil, bundle: nil)
        ___VARIABLE_sceneName___Configurator.inject(dependencyFor: self)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.view.backgroundColor = .white
        
        let param = ___VARIABLE_sceneName___Request()
        interactor?.get___VARIABLE_sceneName___(param: param)
    }
    
}

extension ___VARIABLE_sceneName___UI: ___VARIABLE_sceneName___DisplayLogic {
    
    func display___VARIABLE_sceneName___(viewModel: [___VARIABLE_sceneName___ViewModel]){
        //display view model to view
    }
}
